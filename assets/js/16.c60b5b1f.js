(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{485:function(t,r,e){t.exports=e.p+"assets/img/spring-mvc.efdd8a53.jpg"},486:function(t,r,e){t.exports=e.p+"assets/img/ioc.d4ea8990.jpg"},487:function(t,r,e){t.exports=e.p+"assets/img/synchronized.a4422933.jpeg"},552:function(t,r,e){"use strict";e.r(r);var n=e(5),a=Object(n.a)({},(function(){var t=this,r=t.$createElement,n=t._self._c||r;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"一、spring相关"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、spring相关"}},[t._v("#")]),t._v(" 一、Spring相关")]),t._v(" "),n("h3",{attrs:{id:"_1、spring的mvc原理和实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、spring的mvc原理和实现"}},[t._v("#")]),t._v(" 1、Spring的MVC原理和实现")]),t._v(" "),n("p",[t._v("Spring的Web MVC框架的DispatcherServlet的请求处理流程说明如下图：\n"),n("img",{attrs:{src:e(485),alt:"spring-mvc.jpg"}})]),t._v(" "),n("h3",{attrs:{id:"_2、spring的ioc原理和实现-bean是如何管理起来的-以及它的生命周期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、spring的ioc原理和实现-bean是如何管理起来的-以及它的生命周期"}},[t._v("#")]),t._v(" 2、Spring的IOC原理和实现，bean是如何管理起来的，以及它的生命周期")]),t._v(" "),n("p",[t._v("首先加载注解或者配置文件，形成BeanDefinition类，并将他们存入一个map，然后才到下面的流程。\n"),n("img",{attrs:{src:e(486),alt:"ioc.jpg"}})]),t._v(" "),n("p",[t._v("3、Spring的AOP原理和实现\n4、Spring AOP事务不生效有可能是什么原因\n5、jdk的aop和aspectj的aop有什么区别\n6、Springboot的开发的优势")]),t._v(" "),n("h3",{attrs:{id:"_7、springboot的starter的原理和实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7、springboot的starter的原理和实现"}},[t._v("#")]),t._v(" 7、Springboot的starter的原理和实现")]),t._v(" "),n("p",[t._v("Spring Boot 在启动的时候会干这几件事情：")]),t._v(" "),n("ol",[n("li",[t._v("Spring Boot 在启动时会去依赖的 Starter 包中寻找 resources/META-INF/spring.factories 文件，然后根据文件中配置的 Jar 包去扫描项目所依赖的 Jar 包。")]),t._v(" "),n("li",[t._v("根据 spring.factories 配置加载 AutoConfigure 类")]),t._v(" "),n("li",[t._v("根据 @Conditional 注解的条件，进行自动配置并将 Bean 注入 Spring Context")])]),t._v(" "),n("p",[t._v("resources/META-INF/spring.factories文件的写法很简单，是一个key=value的形式，key是接口的全路径，value是对应实现类的全路径，如果value存在多个实现，用英文逗号分隔。")]),t._v(" "),n("div",{staticClass:"language-xml line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[t._v("# PropertySource Loaders\norg.springframework.boot.env.PropertySourceLoader=\\\norg.springframework.boot.env.PropertiesPropertySourceLoader,\\\norg.springframework.boot.env.YamlPropertySourceLoader\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br")])]),n("p",[t._v("总结一下，其实就是 Spring Boot 在启动的时候，按照约定去读取 Spring Boot Starter 的配置信息，再根据配置信息对资源进行初始化，并注入到 Spring 容器中。这样 Spring Boot 启动完毕后，就已经准备好了一切资源，使用过程中直接注入对应 Bean 资源即可。")]),t._v(" "),n("p",[t._v("这其实是一个SPI(Service Provider Interface)机制的变体，SPI可以在META-INF/services配置接口扩展的实现类，springboot中原理类似，只是名称换成了spring.factories而已。")]),t._v(" "),n("p",[t._v("8、Springboot自动配置那块是怎么实现的？底层代码逻辑\n9、配置依赖如何处理？(配置有先后顺序，并且后面依赖于前面的)\n10、Spring属性的配置如何管理？\n11、Spring SPI机制\n12、SpringCloud的优势，有哪些组件，分别是什么，做什么的？\n13、有做无感发布吗？微服务里怎么实现的？\n14、Spring事务传播机制")]),t._v(" "),n("h1",{attrs:{id:"二、jvm"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、jvm"}},[t._v("#")]),t._v(" 二、jvm")]),t._v(" "),n("p",[t._v("类加载机制\n1、双亲委派机制\n2、有没有什么办法替换JDK源码的初始化？项目中有没有做过？\n3、类加载过程")]),t._v(" "),n("h1",{attrs:{id:"三、jvm内存布局"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、jvm内存布局"}},[t._v("#")]),t._v(" 三、JVM内存布局")]),t._v(" "),n("p",[t._v("1、JVM内存分布，堆、虚拟机栈、本地方法栈、程序计数器、元空间\n2、JVM内存布局里本地变量表了解吗？\n3、JVM问题排查过程\n4、一个栈桢对应一个线程吗？\n5、栈桢对返回值和入参做了什么优化\n6、JAVA创建一个对象的过程，是如何分配内存的？(是否要加锁)")]),t._v(" "),n("h1",{attrs:{id:"四、垃圾回收"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、垃圾回收"}},[t._v("#")]),t._v(" 四、垃圾回收")]),t._v(" "),n("p",[t._v("1、并发标记中如何解决漏标问题\n2、触发GC有哪几种方式\n3、对象有些情况会进入老年代？\n4、讲一下CMS垃圾回收器\n5、dump文件除了OOM会出现，平时如何获取dump文件？\n6、实时查看jvm堆栈信息，详细的GC信息\n7、gc垃圾回收算法cms和g1")]),t._v(" "),n("h1",{attrs:{id:"五、java"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#五、java"}},[t._v("#")]),t._v(" 五、java")]),t._v(" "),n("h2",{attrs:{id:"基础"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[t._v("#")]),t._v(" 基础")]),t._v(" "),n("p",[t._v("1、你们用的java版本？\n2、java8的特性你在实际工作中有用过哪些？\n3、函数式变成用的多吗？(除了lambda)\n4、jdk的动态代理涉及哪些类\n5、java怎么实现深拷贝\n6、java浮点数存储会损失精度，以及BigDecimal")]),t._v(" "),n("h2",{attrs:{id:"内存模型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内存模型"}},[t._v("#")]),t._v(" 内存模型")]),t._v(" "),n("p",[t._v("1、java内存模型\n2、volatile关键字的作用\n3、happenbefore了解吗？\n4、内存屏障")]),t._v(" "),n("h2",{attrs:{id:"集合、线程池、锁、juc工具"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#集合、线程池、锁、juc工具"}},[t._v("#")]),t._v(" 集合、线程池、锁、juc工具")]),t._v(" "),n("p",[t._v("1、java集合框架的认识(ArrayList、LinkedList、HashMap、ConcurrentHashMap、TreeMap、HasSet)\n2、讲一下ArrayList、LinkedList的优缺点和使用场景，ArrayList使用的时候有哪些细节需要注意的？\n3、HashMap的实现，put和resize方法如何实现的，以及1jdk1.7里的死循环问题？\n4、线程池原理，参数，Executors各个线程池的特点。\n5、线程池的线程空闲的时候在干啥\n6、线程池的线程如果遇到异常没有捕获线程会怎样，系统会怎样？\n7、fork/join是怎么实现的\n8、讲一下BlockingQueue\n9、java多线程的线程安全问题，如何解决\n10、java加锁有哪几种方式")]),t._v(" "),n("h3",{attrs:{id:"_11、synchronized可以响应中断吗"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11、synchronized可以响应中断吗"}},[t._v("#")]),t._v(" 11、synchronized可以响应中断吗？")]),t._v(" "),n("p",[t._v("不可以，synchronized不会响应中断。")]),t._v(" "),n("p",[n("strong",[t._v("响应中断的方法")]),t._v("：线程进入等待或是超时等待的状态后，调用interrupt方法都是会响应中断的，所以响应中断的方法：Object."),n("strong",[t._v("wait()")]),t._v("、Thread."),n("strong",[t._v("join")]),t._v("、Thread."),n("strong",[t._v("sleep")]),t._v("、LockSupport."),n("strong",[t._v("park")]),t._v("的有参和无参方法。")]),t._v(" "),n("p",[n("strong",[t._v("不响应中断的方法")]),t._v("：线程进入阻塞状态后，是不响应中断的，等待进入"),n("strong",[t._v("synchronized")]),t._v("的方法或是代码块，都是会被阻塞的，此时不会响应中断，另外还有一个不响应中断的，那就是阻塞在ReentrantLock."),n("strong",[t._v("lock")]),t._v("方法里面的线程，也是不响应中断的，因为中断被吃了，没有外抛。如果想要响应中断，可以使用ReentrantLock.lockInterruptibly方法。")]),t._v(" "),n("h3",{attrs:{id:"_12、synchronized是公平锁吗"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12、synchronized是公平锁吗"}},[t._v("#")]),t._v(" 12、synchronized是公平锁吗？")]),t._v(" "),n("p",[t._v("不是。其他信息参考"),n("a",{attrs:{href:"https://blog.csdn.net/weixin_39606638/article/details/110413494",target:"_blank",rel:"noopener noreferrer"}},[t._v("为什么synchronized是非公平锁_这一次，带你全面了解锁机制！"),n("OutboundLink")],1)]),t._v(" "),n("h3",{attrs:{id:"_13、synchronized锁升级过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_13、synchronized锁升级过程"}},[t._v("#")]),t._v(" 13、synchronized锁升级过程")]),t._v(" "),n("p",[t._v("synchronized在1.6以前是重量级锁，当前只有一个线程执行，其他线程阻塞。为了减少获得锁和释放锁带来的性能问题，而引入了偏向锁、轻量级锁以及锁的存储过程和升级过程。在1.6后锁分为了无锁、偏向锁、轻量锁、重量锁，锁的状态在多线程竞争的情况下会逐渐升级，只能升级而不能降级，这样是为了提高锁获取和释放的效率。\n"),n("img",{attrs:{src:e(487),alt:"synchronized"}})]),t._v(" "),n("p",[t._v("其他信息参考"),n("a",{attrs:{href:"https://juejin.cn/post/6844903670933356551",target:"_blank",rel:"noopener noreferrer"}},[t._v("Synchronized原理"),n("OutboundLink")],1)]),t._v(" "),n("h3",{attrs:{id:"_14、如何关掉synchronized的偏向锁"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_14、如何关掉synchronized的偏向锁"}},[t._v("#")]),t._v(" 14、如何关掉synchronized的偏向锁")]),t._v(" "),n("p",[t._v("偏向锁有点像可重入锁的意思，如果是同一个线程过来，直接通过。自JDK1.6后默认启用。")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("开启：")]),t._v("-XX:+UseBiasedLocking")]),t._v(" "),n("li",[n("strong",[t._v("关闭：")]),t._v("-XX:-UseBiasedLocking\n还有一个参数是**-XX:UseBiasedLockingStartupDelay=0**, 默认是5秒后启用，这里可以设置为0，立即启用。")])]),t._v(" "),n("p",[t._v("15、锁如何实现公平？\n16、ReentrantLock实现\n17、AQS的实现原理和代码，里面都有什么队列，condition的应用讲一下\n18、concurrenthashmap的实现，为什么1.8不用分段锁了？\n19、countdownlatch底层实现\n20、如何实现无锁的线程安全\nCAS")]),t._v(" "),n("h1",{attrs:{id:"六、redis"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#六、redis"}},[t._v("#")]),t._v(" 六、redis")]),t._v(" "),n("p",[t._v("1、redis数据类型及底层实现")]),t._v(" "),n("h3",{attrs:{id:"_2、redis网络架构及单线程模型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、redis网络架构及单线程模型"}},[t._v("#")]),t._v(" 2、Redis网络架构及单线程模型")]),t._v(" "),n("p",[t._v("Redis一般被看作单进程/单线程组件，因为Redis的网络IO和命令处理，都在核心进程中由单线程处理。")]),t._v(" "),n("p",[t._v("Redis基于Epoll事件模型开发，可以进行非阻塞网络IO，同时由于单线程命令处理，整个处理过程不存在竞争，不需要加锁，没有上下文开销，所有数据操作都在内存中。")]),t._v(" "),n("p",[t._v("核心线程除了负责网络IO及命令处理外，还负责写数据到缓冲区，以方便将最新写操作同步到AOF、slave。除了核心线程，还有3个辅助BIO线程，分别负责文件关闭、将AOF缓冲刷入磁盘、清理对象。")]),t._v(" "),n("h3",{attrs:{id:"_3、redis的数据结构讲一下"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3、redis的数据结构讲一下"}},[t._v("#")]),t._v(" 3、redis的数据结构讲一下")]),t._v(" "),n("p",[t._v("数据结构有String、List、Hash、Set、ZSet、Bitmap等，他们底层对应的存储结构是sds、dict、ziplist、quicklist和skiplist。\n其中String、Bitmap对应的是sds，List对应的是quicklist。Set用dict存储。\nHash在数量小(512)长度短(64)的时候用的是ziplist，超过了用dict。\nZSet在数量小(128)长度短(64)的时候用的是ziplist，超过了用skiplist。")]),t._v(" "),n("h3",{attrs:{id:"_4、ziplist为什么节省空间-rehash过程是什么。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4、ziplist为什么节省空间-rehash过程是什么。"}},[t._v("#")]),t._v(" 4、ziplist为什么节省空间，rehash过程是什么。")]),t._v(" "),n("p",[t._v("ziplist是去除了前后的指针，来达到以节省空间的。所以ziplist要求内存地址是连续的，通过头尾地址，元素数量来定位元素。")]),t._v(" "),n("h3",{attrs:{id:"_5、讲一下skiplis-为什么用skiplist而不是红黑树"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5、讲一下skiplis-为什么用skiplist而不是红黑树"}},[t._v("#")]),t._v(" 5、讲一下skiplis，为什么用skiplist而不是红黑树？")]),t._v(" "),n("p",[t._v("skiplist和红黑树在实际使用的时候，效率差不多。但是使用skip还有两个原因：")]),t._v(" "),n("ol",[n("li",[t._v("结构简单，易于实现；红黑树虽然翻转已经很少，但是实现逻辑还是很复杂的。")]),t._v(" "),n("li",[t._v("跳的步长天然地适合权重排序的场景")])]),t._v(" "),n("h3",{attrs:{id:"_6、你用哪些redis命令-比如获取到redis-set的长度-list的呢"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6、你用哪些redis命令-比如获取到redis-set的长度-list的呢"}},[t._v("#")]),t._v(" 6、你用哪些redis命令，比如获取到redis set的长度？list的呢？")]),t._v(" "),n("p",[t._v("set：scard\nlist： llen")]),t._v(" "),n("h3",{attrs:{id:"_7、redis用的什么版本-讲一下redis部署模式的演进-单机-主从-哨兵-集群-为了解决什么问题-如何实现-特点。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7、redis用的什么版本-讲一下redis部署模式的演进-单机-主从-哨兵-集群-为了解决什么问题-如何实现-特点。"}},[t._v("#")]),t._v(" 7、redis用的什么版本？讲一下redis部署模式的演进，单机，主从，哨兵，集群，为了解决什么问题，如何实现，特点。")]),t._v(" "),n("h3",{attrs:{id:"_8、如果在集群里多添加一个节点-redis会怎么做数据处理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8、如果在集群里多添加一个节点-redis会怎么做数据处理"}},[t._v("#")]),t._v(" 8、如果在集群里多添加一个节点，redis会怎么做数据处理？")]),t._v(" "),n("p",[t._v("简单地说，就是需要执行redis命令迁移槽位。大概的过程是：")]),t._v(" "),n("ol",[n("li",[t._v("计算好每个源节点需要向新节点迁移多少个槽位")]),t._v(" "),n("li",[t._v("对目标节点发送cluster setslot{slot}importing{sourceNodeId}命令，让目标节点准备导入槽的数据")]),t._v(" "),n("li",[t._v("对源节点发送cluster setslot{slot}migrating{targetNodeId}命令，让源节点准备迁出槽的数据")]),t._v(" "),n("li",[t._v('在源节点上执行migrate{targetIp}{targetPort}""0{timeout}keys{keys...} 命令，把获取的键通过流水线（pipeline）机制批量迁移到目标节点，批量 迁移版本的migrate命令在Redis3.0.6以上版本提供，之前的migrate命令只能 单个键迁移。对于大量key的场景，批量键迁移将极大降低节点之间网络IO次数。')]),t._v(" "),n("li",[t._v("重复执行步骤3）和步骤4）直到槽下所有的键值数据迁移到目标节点。")]),t._v(" "),n("li",[t._v("向集群内所有主节点发送cluster setslot{slot}node{targetNodeId}命令，通知槽分配给目标节点。为了保证槽节点映射变更及时传播，需要遍历发送给所有主节点更新被迁移的槽指向新节点。")])]),t._v(" "),n("p",[n("a",{attrs:{href:"https://blog.csdn.net/tr1912/article/details/82390540",target:"_blank",rel:"noopener noreferrer"}},[t._v("【redis】集群伸缩（添加删除节点）"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("9、redis集群如何防止超卖(数据同步问题)\n10、redis的过期策略是怎样的，有哪些淘汰机制？是怎么发现key过期的？\n11、redis的备份方式")]),t._v(" "),n("ol",[n("li",[t._v("aof")]),t._v(" "),n("li",[t._v("rdb快照")]),t._v(" "),n("li",[t._v("aof+rdb快照")])]),t._v(" "),n("p",[t._v("12、AOF的重写机制")]),t._v(" "),n("p",[t._v("13、RDB快照时如何做到边做快照便提供服务，copyonwritte了解吗？\n原数据操作系统层面的read-only，只能操作copy出来的备份。")]),t._v(" "),n("p",[t._v("14、redis各个节点之间是怎么进行通信的？用到什么协议？\nGossip协议通信，端口为redis对外服务端口+10000，如服务端口为6975，那么gossip端口为16975。\nGossip协议主要由meet、ping、pong、fail四种消息，其中meet、ping、fail的回应消息都是pong。")]),t._v(" "),n("h3",{attrs:{id:"_15、redis和mysql双写一致性问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_15、redis和mysql双写一致性问题"}},[t._v("#")]),t._v(" 15、redis和mysql双写一致性问题")]),t._v(" "),n("p",[t._v("解决办法有以下几种")]),t._v(" "),n("ol",[n("li",[t._v("设置redis缓存过期时间，保证最终一致性")]),t._v(" "),n("li",[t._v("延时双删策略：先淘汰缓存, 再写数据库, 异步1秒后，再次淘汰缓存 这么做，可以将1秒内所造成的缓存脏数据，再次删除。")])]),t._v(" "),n("p",[n("a",{attrs:{href:"https://www.cnblogs.com/liuqingzheng/p/11080680.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redis与Mysql双写一致性方案解析"),n("OutboundLink")],1)]),t._v(" "),n("h1",{attrs:{id:"七、kafka"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#七、kafka"}},[t._v("#")]),t._v(" 七、kafka")]),t._v(" "),n("p",[t._v("1、MQ的推和拉模式你是怎么理解的，本质区别是什么\n2、如何保证消息中间件有序\n3、有没有用过netty https://javadoop.com/post/netty-part-1\n4、kafka原理机制讲一下\n5、kafka数据消费异常如何处理\n6、kafka从生产到消费的整个流程，怎么保证消息不丢失，会遇到哪些问题，怎么解决的，都讲一下")]),t._v(" "),n("h1",{attrs:{id:"八、流量缓存"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#八、流量缓存"}},[t._v("#")]),t._v(" 八、流量缓存")]),t._v(" "),n("h3",{attrs:{id:"_1、限流机制-源码原理-限流值是如何确定的-为了什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、限流机制-源码原理-限流值是如何确定的-为了什么"}},[t._v("#")]),t._v(" 1、限流机制，源码原理？限流值是如何确定的？为了什么？")]),t._v(" "),n("p",[t._v("限流机制主要由漏斗法、令牌桶法。我们做的限流，分两个级别")]),t._v(" "),n("ol",[n("li",[t._v("nginx限制单个ip的并发请求数，原理是漏斗法。")]),t._v(" "),n("li",[t._v("网关限制接口的请求，因为网关和后端app采用的是轮询算法，所以虽然是对单个pod的限流，但也实现了分布式限流的总数。原理是令牌桶法，具体是guava的RateLimiter。")])]),t._v(" "),n("h3",{attrs:{id:"_2、7层负载均衡的原理-侧重讲一下应用层和传输层。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、7层负载均衡的原理-侧重讲一下应用层和传输层。"}},[t._v("#")]),t._v(" 2、7层负载均衡的原理？侧重讲一下应用层和传输层。")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://www.cnblogs.com/arjenlee/articles/9262737.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("lvs+nginx负载均衡"),n("OutboundLink")],1),t._v(" "),n("a",{attrs:{href:"https://www.cnblogs.com/baby123/p/11833048.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("负载均衡Nginx和F5的区别"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("3、负载均衡?轮询后端权重怎么确定?如果希望根据连接数分配请求，你如何设计?\n4、nginx有没有检测后台服务的功能？\n5、Tomcat有多少并发/线程支持这600的QPS？\n6、mybatis的缓存，有没有做过扩展？数据权限、数据监控、缓存？\n7、为何要用caffeine？\n8、guava和caffeine的区别\n9、caffeine为何效率能提升\n10、caffeine有没有用到什么问题？比如递归引用？\n11、缓存穿透、击穿、雪崩三问，如何解决\n12、缓存失效的几种场景，以及解决方案")]),t._v(" "),n("h1",{attrs:{id:"九、数据库"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#九、数据库"}},[t._v("#")]),t._v(" 九、数据库")]),t._v(" "),n("h2",{attrs:{id:"架构方案"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#架构方案"}},[t._v("#")]),t._v(" 架构方案")]),t._v(" "),n("p",[t._v("1、为何从MariaDB迁移到MGR？\n2、有没有做过什么mysql优化\n3、讲一下mysql的3个log\n4、双活的数据同步是怎么做的？")]),t._v(" "),n("h2",{attrs:{id:"事务级别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#事务级别"}},[t._v("#")]),t._v(" 事务级别")]),t._v(" "),n("p",[t._v("1、什么是acid，MySQL如何实现ACID\n2、数据库事务级别，脏读、可重复度、幻读？\n3、mysql事务隔离级别，acid中一致性的理解\n4、mysql的隔离级别，所解决的问题\n5、mysql可重复度的实现原理")]),t._v(" "),n("h3",{attrs:{id:"_6、mysql是如何实现可重复读的-和串行化实现上的区别是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6、mysql是如何实现可重复读的-和串行化实现上的区别是什么"}},[t._v("#")]),t._v(" 6、mysql是如何实现可重复读的，和串行化实现上的区别是什么")]),t._v(" "),n("p",[t._v("mysql实现可重复读的方式：MVCC。具体过程是：")]),t._v(" "),n("ol",[n("li",[t._v("InnoDB在每行记录后面保存两个隐藏的列来，分别保存了这个行的创建时间和行的删除时间。这里存储的并不是实际的时间值,而是系统版本号。")]),t._v(" "),n("li",[t._v("当数据被修改时，版本号加1。")]),t._v(" "),n("li",[t._v("在读取事务开始时，系统会给当前读事务一个版本号，事务会读取版本号<=当前版本号的数据。此时如果其他写事务修改了这条数据，那么这条数据的版本号就会加1，从而比当前读事务的版本号高，读事务自然而然的就读不到更新后的数据了。")])]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("特性")]),t._v(" "),n("th",[t._v("含义")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("Atom")]),t._v(" "),n("td",[t._v("事务的一组操作是原子的不可再分割的，这组操作要么同时完成要么同时不完成。")])]),t._v(" "),n("tr",[n("td",[t._v("Consistency")]),t._v(" "),n("td",[t._v("事务在执行前后数据的完整性保持不变，数据库在某个状态下符合所有的完整性约束的状态叫做数据库具有完整性。")])]),t._v(" "),n("tr",[n("td",[t._v("Isolation")]),t._v(" "),n("td",[t._v("当多个事务同时操作一个数据库时，可能存在并发问题，此时应保证各个事务要进行隔离，事务之间不能互相干扰。")])]),t._v(" "),n("tr",[n("td",[t._v("Durability")]),t._v(" "),n("td",[t._v("持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，不能再回滚。")])])])]),t._v(" "),n("p",[t._v("要注意，Consistency是最终目的，其他三个特性都是围绕达成它来做的。比如，银行转账问题，A给B转100元。A要么少了100，然后B多了100，要么A没少，B也没多。不能出现A少了100，B也没多100，这就叫一致性。再举个例子，一个手机性能好，CPU强劲，内存反应快，指纹解锁快，那么这里的手机性能好，就相当于ACID里的C，一致性！")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("事务级别")]),t._v(" "),n("th",[t._v("解决的问题")]),t._v(" "),n("th",[t._v("实现原理")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("Read Uncommitted")]),t._v(" "),n("td",[t._v("更新丢失，如果A事务已经开始写数据，B事务则不允许同时进行写操作，但允许其他事务读此行数据。")]),t._v(" "),n("td",[t._v("排他写锁")])]),t._v(" "),n("tr",[n("td",[t._v("Read Committed")]),t._v(" "),n("td",[t._v("避免脏读取，就是A事务修改未提交，B事务读不到到A修改后的数据，A提交后，B可以读到")]),t._v(" "),n("td",[t._v("“瞬间共享读锁”和“排他写锁”")])]),t._v(" "),n("tr",[n("td",[t._v("Repeatable Read")]),t._v(" "),n("td",[t._v("解决不可重复读取，也就是说A多次读取数据都是一样的，不管B是否是否已经修改了对应的数据")]),t._v(" "),n("td",[t._v("MVCC+next-key lock")])]),t._v(" "),n("tr",[n("td",[t._v("Serializable")]),t._v(" "),n("td",[t._v("解决幻读，一个 select 语句执行了两次，但是在第二次返回了第一次没有返回的行,那么这些行就是“phantom” row")]),t._v(" "),n("td",[t._v("所有select都加了for update")])])])]),t._v(" "),n("h3",{attrs:{id:"_7、mysql有哪些锁"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7、mysql有哪些锁"}},[t._v("#")]),t._v(" 7、mysql有哪些锁")]),t._v(" "),n("p",[t._v("行锁、表锁、间隙锁、next-key锁、意向锁，其中next-key锁是由行锁和间隙锁组成的。")]),t._v(" "),n("h2",{attrs:{id:"分库分表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#分库分表"}},[t._v("#")]),t._v(" 分库分表")]),t._v(" "),n("p",[t._v("1、分表分库，路由策略\n2、分表用的工具sharing-jdbc，源码原理，如何做的分库表表\n3、分表下的扩容怎么做？\n4、热点数据导致分表不均匀如何处理\n5、分表的表数目要扩大一倍如何做？")]),t._v(" "),n("h2",{attrs:{id:"分页"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#分页"}},[t._v("#")]),t._v(" 分页")]),t._v(" "),n("p",[t._v("1、mysql分页查询的原理，实现机制，如何避免分页查询越来越慢\n2、mysql分页是如何实现的？深度分页？回表？")]),t._v(" "),n("h3",{attrs:{id:"_3、mysql分页查询查第1000-0000到1000-1010条-是从第一条往前查吗-有什么优化手段"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3、mysql分页查询查第1000-0000到1000-1010条-是从第一条往前查吗-有什么优化手段"}},[t._v("#")]),t._v(" 3、mysql分页查询查第1000_0000到1000_1010条，是从第一条往前查吗？有什么优化手段")]),t._v(" "),n("p",[t._v("采用书签法，每一次传入上一次的最大的主键，然后以此为基准将limit 1000_0000, 10变成limit 0, 10。\n不过这种方案有局限：")]),t._v(" "),n("ol",[n("li",[t._v("主键必须是自增的")]),t._v(" "),n("li",[t._v("分页距离过大还是会很慢")]),t._v(" "),n("li",[t._v("往前翻页还是会很慢\n针对这三个问题，第1个没什么好说的，主键自增，可以做这个要求，自增的主键对范围查询是友好的。")])]),t._v(" "),n("p",[t._v("第2个问题，直接在页面不给跳转分页的入口，只给相对分页，相对分页可以算出距离差，性能也很好。")]),t._v(" "),n("p",[t._v("第3个问题，往前翻页，需要做缓存，把相同条件的页码查询的最大主键做缓存，如果遇到往前分页，需要先查找到前面最近的一次分页查询，并计算出增量。")]),t._v(" "),n("h2",{attrs:{id:"慢查询"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#慢查询"}},[t._v("#")]),t._v(" 慢查询")]),t._v(" "),n("p",[t._v("1、什么是慢查询，有慢查询优化经验吗？\n2、数据库索引不合理的表象是什么？如何定位分析慢sql")]),t._v(" "),n("h2",{attrs:{id:"索引"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#索引"}},[t._v("#")]),t._v(" 索引")]),t._v(" "),n("p",[t._v("1、mysql常用的引擎\n2、mysql的索引结构、数据存储结构\n3、如何判断一个索引是否合理？或者说你是如何考虑要建一个索引的？\n4、说一下B树和B+树的区别\n5、3阶B+树能存多少数据？\n6、来写个sql，找出用户数最多的topk个城市（我sql写的很少，只了解理论，所以硬着头皮乱写了一下）\n7、给了一个建立了主索引和二级索引的表（InnoDB），where条件命中二级索引，问总共走了几次索引\n8、mysql索引优化。https://tech.meituan.com/2014/06/30/mysql-index.html\n9、SQL聚合查询语法\n10、B+树的每个节点存储的什么\n11、MyISAM主键索引和普通索引保存的都是数据指针。\n12、Innodb 聚集索引保存的是数据，普通索引保存的是主键。\n13、为什么用b+tree呢，范围查询友好，有指向邻接点的指针。磁盘IO更少，层次更少。\n14、mysql有哪些索引，什么叫回表？\n15、索引的最左匹配原则是什么？\n16、索引失效场景和最左匹配原则")]),t._v(" "),n("h1",{attrs:{id:"十、问题定位"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#十、问题定位"}},[t._v("#")]),t._v(" 十、问题定位")]),t._v(" "),n("p",[t._v("1、抢购系统压力比较大，大在哪里？什么量级？系统有没有遇到什么问题，怎么定位解决的？\n2、如果CPU达到100%，应该如何定位\n3、压测出现的问题，如何解决\n4、线上问题如何处理？\n5、如何做性能调优？\n6、现在系统出现一种卡顿、慢，你如何定位？\n7、多线程的问题排查过程\n8、现场发现一个服务请求特别慢，CPU特别高，如何定位？\n9、如何定位发现死锁？\n10、微服务如何定位问题？")]),t._v(" "),n("h3",{attrs:{id:"_11、系统一直频繁fullgc但是没有oom-这种问题如何定位"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11、系统一直频繁fullgc但是没有oom-这种问题如何定位"}},[t._v("#")]),t._v(" 11、系统一直频繁fullGC但是没有oom，这种问题如何定位？")]),t._v(" "),n("p",[t._v("fullgc有两种可能，一种是分配的对象太多了，导致多次叠转后进入老年代的对象过多，另外一种是代码调用System.gc。\n如果没有OOM，说明内存不是一直递增的，有回收。信息还不够，需要继续定位。")]),t._v(" "),n("ol",[n("li",[t._v("在目标机器上执行"),n("strong",[t._v("java -XX:PrintCommandLineFlags -version")]),t._v("查看配置的JVM启动参数，主要关心堆空间新老层大小和比例的分配，老年代晋升的设置，以及确认是什么垃圾回收算法")]),t._v(" "),n("li",[t._v("如果1的方法无法看到，那么说明用的是默认配置，也可以用"),n("strong",[t._v("java -XX:PrintFlagsFinal -version")]),t._v("查看默认配置")]),t._v(" "),n("li",[t._v("使用jstat命令查看当前gc情况，"),n("strong",[t._v("jstat -gc {pid}")]),t._v("，主要关注MinorGC和FullGC的次数，耗时，各部位的大小")]),t._v(" "),n("li",[t._v("使用jstat命令查看当前gc的可能原因，"),n("strong",[t._v("jstat -gccause {pid}")]),t._v("，如果看不出什么来，可以在末尾加个时间持续打印观察，如："),n("strong",[t._v("jstat -gc {pid} 100")]),t._v("，100毫秒打印一次，如果gfullc频繁，应该可以看到GCC下打印的字段，要么的内存分配失败，要么是在调整，要么是System.gc。如果是System.gc，那么需要查看代码，看哪里调用了System.gc，搜索代码的时候，可以把三方包的代码也加上，防止是因为三方包的代码导致的。如果是分配内存失败导致的fullgc，那么需要重新观察堆各个部分的大小和增长速度。")]),t._v(" "),n("li",[t._v("4中如果是内存分配失败，那么说明存在一直创建的对象，这个时候，需要用jmap打出多个时间段的dump文件，然后使用MAT工具对比查看哪部分的对象多。")]),t._v(" "),n("li",[t._v("根据前5步，应该能基本定位到对应代码，这个时候专心看代码。")]),t._v(" "),n("li",[t._v("有一定的想法后，在测试环境复现，并修复，方案ok后，同步到生产。")])]),t._v(" "),n("h1",{attrs:{id:"十一、设计模式与算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#十一、设计模式与算法"}},[t._v("#")]),t._v(" 十一、设计模式与算法")]),t._v(" "),n("p",[t._v("1、讲几个你熟悉的设计模式\n2、1000万条正整数，如何拿到最大的或者最小的5个\n3、快速排序的实现原理\n4、笔试题，两个线程，A只打印数字，B只打印字幕，交替打印出字符串“12A34B45C”\n5、每个客户的银行卡会同时存在多种交易，取现、存款、转账等，写一个同行银行卡转账的思路，A转账给B(提示：考虑并发、死锁、单数据库、多应用实例执行)\n6、百亿数据求中位数\n7、hash冲突\n8、一亿个qq号存储查找\n9、10亿个url 4g内存去重\n10、用两个栈实现队列，问我怎么优化\n11、100万的关键字中找到某个字符串\n12、快排\n13、给一个能随机产生1到10000的函数，如何能让它产生随机1到7000；\n14、给一个函数，返回 0 和 1，概率为 p 和 1-p，请你实现一个函数，使得返回 01 概率一样。\n15、KV的数据结构，要求内部有序（我：B+/红黑/堆+哈希表）\n16、来写个题：判断一个二叉树是否为完全二叉树\n17、来写个题：求两个班成绩的最小差值\n18、给一个数组，代表一个数字比如[3,1,4,5,2]代表31452，让你删除k个数字，使得留下来的值最大，返回这个最大值\n19、通过前序中序重建二叉树输出后序\n20、翻转二叉树，找到二叉树两个节点的最短距离\n21、1T文件，每一行都是一个数字，求出现次数最多的topK\n22、链表两两反转 In:1→2→3→4→5 Out:2→1→4→3→5\n23、用层序遍历数组输出中序遍历（递归和非递归）\n24、将N个有序数组（每个长度为M）排序成一个有序数组（优先队列或归并），并问了复杂度\n25、我们有一系列公交路线。每一条路线 routes[i] 上都有一辆公交车在上面循环行驶。\n例如，有一条路线 routes[0] = [1, 5, 7]，表示第一辆\n(下标为0) 公交车会一直按照 1->5->7->1->5->7->1->... 的车站路线行驶。\n假设我们从 S 车站开始（初始时不在公交车上），要去往 T 站。\n期间仅可乘坐公交车，求出最少乘坐的公交车数量。返回 -1 表示不可能到达终点车站\n输入：\nroutes = [[1, 2, 7], [3, 6, 7]]\nS = 1\nT = 6\n输出：2\n解释：\n最优策略是先乘坐第一辆公交车到达车站 7, 然后换乘第二辆公交车到车站 6。")]),t._v(" "),n("p",[t._v("26、多个有序单链表归并为一个有序链表，要求不能自己建立新节点，复杂度NlogN\n27：堆排序熟悉吗？实现堆排序插入的函数\n28、三个数组的归并排序\n29、查找一个字符串中无重复字符的最长子串。\n30、单链表排序\n31、在一个二维字符数组中，查询指定单词。\n32、过滤词实现\n33、两个人抛硬币，先抛到正面的赢，问先后手的胜率是多少。\n34、假设你正在爬楼梯。需要 n 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？")]),t._v(" "),n("h1",{attrs:{id:"十二、通信协议"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#十二、通信协议"}},[t._v("#")]),t._v(" 十二、通信协议")]),t._v(" "),n("p",[t._v("http\n1、讲讲HTTP协议？请求行、请求头、请求体，请求体的结构他们通过什么分隔符来分隔的。\n2、http返回码有几类？\n3、http返回码301和302的用处和区别？\n4、说一下HTTPS的访问过程，协议是如何建立起来的\n5、HTTPS建立连接的过程中交换了多少个随机数")]),t._v(" "),n("h2",{attrs:{id:"tcp-udp"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tcp-udp"}},[t._v("#")]),t._v(" tcp/udp")]),t._v(" "),n("p",[t._v("1、TCP对比UDP，直播为什么用udp不是tcp\n2、TCP的滑动窗口和拥塞\n"),n("a",{attrs:{href:"https://blog.csdn.net/ligupeng7929/article/details/79597423",target:"_blank",rel:"noopener noreferrer"}},[t._v("TCP的滑动窗口与拥塞窗口"),n("OutboundLink")],1),t._v("\n3、tcp的粘包和半包\n4、TCP三次握手详细过程？SYN攻击底层原理是什么？（要答到内核的半连接队列）\n5、TCP四次挥手TIME_WAIT状态作用？为什么是2MSL？MSL和TTL什么关系？\n6、服务器大量TIME_WAIT状态，危害是什么？\n7、TCP的MSL生命周期怎么控制的，怎么确定MSL的时间\n8、服务端出现大量close_wait原因（主子进程共享socket，close不能完全关闭）\n9、你提到了优雅关闭tcp连接，说一下shutdown和close？")]),t._v(" "),n("h2",{attrs:{id:"请求链路"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#请求链路"}},[t._v("#")]),t._v(" 请求链路")]),t._v(" "),n("p",[t._v("1、浏览器访问baidu.com的过程\n2、ping实现\n3、服务端在调用listen之后调用sleep，客户端connect之后会返回错误吗\n4、服务端一直阻塞着(调用sleep)，客户端调用send会返回错误吗？\n5、IP 地址子网划分\n6、DNS 解析过程\n7、查看端口占用ps -aux | grep netstat -anp | grep ***")]),t._v(" "),n("h1",{attrs:{id:"十三、项目架构相关"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#十三、项目架构相关"}},[t._v("#")]),t._v(" 十三、项目架构相关")]),t._v(" "),n("p",[t._v("1、工作中的挑战，架构负责还是业务复杂，并发比较大，流量比较高，简历没体现？\n2、挑一个你觉得做得还可以的项目讲一讲\n3、平时工作中用到的技术栈，这些技术栈都起到什么作用\n4、你们系统目前的并发有多少？\n5、说一下抢购的设计流程、架构\n6、防止非法抢购请求，你们都做了什么措施？\n7、你现在负责哪个系统？\n8、你们的双活是怎么做的？(面试官关注数据源)\n9、抢购系统做了什么优化，解决了什么问题？\n10、多选提交，后台代码怎么处理？\n11、平时如何保证代码质量？\n12、日志级别开的什么级别？\n13、抢购系统对性能损耗最大的在哪里？\n14、抢购现在还能优化吗？\n15、抢购为何要分多个步骤？(削峰填谷)\n16、抢购的技术架构\n17、你们抢购的数据量有多大？\n18、讲讲你们的技术架构\n19、工作强度大有加人吗？\n20、你们这个中台的工作流程是怎么样的？业务逻辑需要开发分析吗？\n21、抢购重构做了哪些？\n22、架构重构中遇到了什么问题？(面试官主要是想问你遇到的难题，如何解决的)\n23、比较难设计实现需求\n24、你们如何写测试用例的？(有没有不用启动Springboot作测试用例)\n25、你觉得做的比较好的项目\n26、讲一下华为OSS的性能和告警是怎么实现的\n27、营销系统的架构设计\n28、接口如何实现幂等\n29、你们订单如何生成唯一id\n30、工作中遇到比较困难的问题，怎么解决的？技术上的，网络上的，jvm上面的\n31、什么是CAP\n32、分布式系统优缺点，一致性是如何保证的\n33、加强版：令牌桶，加上随时间滑动的要求，即：限制用户在任一连续的一小时内，不能超过5W的请求。这边提到了说将一小时分成多格，比如60格这样的，面试官点头貌似同意了，然后就实现代码了，包括协程异步更新时间窗口；\n34、如何判断一个pod是否需要加内存？或者一个微服务是否需要加pod？\n35、spring事物传播 16位设计一个分布式可靠的uuid")]),t._v(" "),n("h1",{attrs:{id:"十四、发散性问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#十四、发散性问题"}},[t._v("#")]),t._v(" 十四、发散性问题")]),t._v(" "),n("p",[t._v("1、为什么想换工作？对我们公司有了解吗？\n2、为何从华为/中信跳出来？\n3、你对自己未来的规划？\n4、你的长处？要么是技术比较强，要么是沟通能力比较强！设计模式，设计理念，开源技术栈的了解！\n5、最近在专业学习上有看什么书籍？(这个问题是为了接下来问你技术)\n6、离职初衷是什么？\n7、平时有没有学习一些知识用到工作场景")]),t._v(" "),n("h1",{attrs:{id:"十五、操作系统及系统内核部分"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#十五、操作系统及系统内核部分"}},[t._v("#")]),t._v(" 十五、操作系统及系统内核部分")]),t._v(" "),n("p",[t._v("1、说下多进程服务器，多线程服务器，协程服务器各种优势场景以及缺陷?\n2、进程线程区别?你刚才说线程切换代价小，具体小在哪?\n3、零拷贝\n4、你知道的影响server并发的内核参数有哪些？TCP选项有哪些？描述一下\n5、讲讲IO模型？\n6、IO模型了解吗？讲下select/poll/epoll？各自优劣、底层实现、使用场景？\n7、epoll实现原理，和poll的对比\n8、CPU寻址过程，cache miss,TLB,页表...\n9、在linux上执行ls操作系统做了什么（这个在6.S081上看过，刚好会，哈哈）\n10、traceroute tcpdump ss strace lsof netstat grep ping iotop\n11、虚拟内存\n12、进程如何保持同步\n13、进程间的通信（还进阶考了fork等代代码题）\n14、ipc 线程同步\n15、fork\n16、有名管道和无名管道\n17、进程线程\n18、线程私有栈\n19、进程间传递fd\n20、磁盘转一次要多久\n21、进程虚拟地址布局\n22、内核创建进程和线程\n23、fork之后父进程和子进程的栈变量是私有还是公有，堆变量呢，全局变量呢，常量呢，static 变量呢；\n24、用mmap将共享内存映射到进程的虚拟地址空间时有没有分配物理内存，什么时候才真正分配物理内存给共享变量\n25、硬链接和软连接区别；\n26、kill 用法，某个进程杀不掉的原因（进入内核态，忽略 kill 信号）；\n27、linux 用过的命令；\n28、系统管理命令（如查看内存使用、网络情况）find awk\n29、缺页中断？OS会干什么？linux系统怎么看缺页中断\n30、那发现运行着tcp服务器的系统发生大量缺页中断，可能的原因是什么？\n31、说到了io模型，那介绍下IO模型有哪些?epoll知道吗?详细介绍一下\n32、epoll使用场景?select具体性能消耗在哪?\n33、epoll需要拷贝文件描述符吗？\n34、描述下nginx多进程模型?为什么用多进程?(master +多worker，master负责fork出子进程并listen，子进程accept)\n35、进程和线程区别\n36、程序计数器作用，为什么是私有的\n37、select、poll、epoll，说下详情，各自的优缺点\n38、边缘触发和水平触发区别，边缘触发的IO应该怎么写\n39、delete、new和malloc、free的关系\n40、 惊群是什么意思，怎么解决。")]),t._v(" "),n("ol",[n("li",[n("a",{attrs:{href:"https://blog.csdn.net/qq_35634181/article/details/106769113",target:"_blank",rel:"noopener noreferrer"}},[t._v("对于Java线程中断的理解，哪种情况下会响应中断？哪种情况下不响应中断？"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://blog.csdn.net/weixin_39606638/article/details/110413494",target:"_blank",rel:"noopener noreferrer"}},[t._v("为什么synchronized是非公平锁_这一次，带你全面了解锁机制！"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://juejin.cn/post/6844903670933356551",target:"_blank",rel:"noopener noreferrer"}},[t._v("Synchronized原理"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247488811&idx=3&sn=b04d8fdacf575c7ec959de4107f31091&chksm=ebd62a07dca1a31186f7f62de60ba7c7a88db26233562ed7183c6f609c5e7f4ffb448f30375f&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("面试问题聚集"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://www.artima.com/articles/io_design_patterns.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Comparing Two High-Performance I/O Design Patterns"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://blog.csdn.net/shallwake/article/details/5265287",target:"_blank",rel:"noopener noreferrer"}},[t._v("再谈select, iocp, epoll,kqueue及各种I/O复用机制"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://blog.csdn.net/R_P_J/article/details/78813265",target:"_blank",rel:"noopener noreferrer"}},[t._v("redis-cluster核心原理分析：gossip通信、jedis smart定位、主备切换"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://blog.csdn.net/a1173537204/article/details/103376495",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redis学习 redis节点之间的通信(十六)"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://blog.csdn.net/z50l2o08e2u4aftor9a/article/details/81008933",target:"_blank",rel:"noopener noreferrer"}},[t._v("Cache Aside Pattern"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://www.cnblogs.com/biglittleant/p/8979915.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("死磕nginx系列--nginx 限流配置"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://blog.csdn.net/zc529739024/article/details/78744876",target:"_blank",rel:"noopener noreferrer"}},[t._v("开发高并发系统时保护系统的三把利器：缓存、降级和限流"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://www.cnblogs.com/lmj612/p/10598971.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL可重复读隔离级别的实现原理"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://blog.csdn.net/a3961401/article/details/110875387",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入浅出聊一聊mysql中的事务及其实现原理"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzIyNDU2ODA4OQ==&mid=2247485351&idx=2&sn=214225ab4345f4d9c562900cb42a52ba&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java面试题精选"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://mp.weixin.qq.com/s/u9Sm_ezjbCWrmxCZ0y0f8Q",target:"_blank",rel:"noopener noreferrer"}},[t._v("唯品会一面：Spring 为何需要三级缓存解决循环依赖，而不是二级缓存？"),n("OutboundLink")],1)])])])}),[],!1,null,null,null);r.default=a.exports}}]);